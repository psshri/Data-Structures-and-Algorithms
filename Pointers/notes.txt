Pointers are variables that store the address of another variables

Function call in which, instead of passing the value of a variable, we pass the
address of the variable, so that we have a reference to the variable and we can
dereference it and perform some operations is called call by reference. if we
use pointers as function arguments then we are using call by reference. Call by
reference can save us a lot of memory because instead of creating a copy of
large and complex  data type, we just use a reference to it.  

If you want to define a very large data in your function, its better to use the
heap section of memory to do so, otherwise your stack function call might get
exhausted, leading to stack overflow. Although this doesn't happen very easily.

For an array:
Element at index i:
    Address: &A[i] or (A+i)
    Value: A[i] or *(A+i)

name of an array gives us the base address of an array


when a compiler sees an array as function argument, it does not copy the whole
array, what it actually does is just creates a pointer variable by the same 
name, instead of creating the whole array, it just creates a pointer to the data
type of the array, eg pointer to integer